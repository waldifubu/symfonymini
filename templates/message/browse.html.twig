{% extends 'base.html.twig' %}

{% block body %}
    {% if app.user %}
        <div class="connected-user">
            <p>Connecté en tant que : {{ app.user.getUsername }}
                <a class="btn btn-danger" href="{{ path("app_logout") }}">Logout</a></p>
        </div>
    {% endif %}
    <div class="messages-list col-12">
        <div class="container my-3">
            {% if conversation is defined %}
                <a class="btn btn-primary" href="{{ path("conversation_browse") }}">List of conversations</a>
                <a class="btn btn-success" href="{{ path("messages_ping", {'id' : conversation.id}) }}">Ping Mercure (EventSource)</a>
                <h2>Conversation : {{ conversation.name }}</h2>
                {% if conversation.admin.getId == app.user.getId %}
                    <a class="btn btn-danger" href="{{ path("conversation_delete", {'id' : conversation.id}) }}">delete</a>
                {% endif %}
            {% endif %}
        </div>

        <div class="container ">
            {% if(conversation.admin.getUsername) %}
                <div class="connected-user">
                    <p>Administrateur : {{ conversation.admin.getUsername }}</p>
                </div>
            {% endif %}
            <div class="conversation">
                {% if messages is empty %}
                    <div class="row">
                        <div class="media mr-auto mb-3">
                            <div class="col-12 media-body">
                                Envoyez le premier message.
                            </div>
                        </div>
                    </div>
                {% else %}
                    {% for key, message in messages %}
                        {% if message.mine %}
                            <!-- Sender Message-->
                            <div class="chat--message ">
                                <div class="d-flex flex-row-reverse">
                                    <div class="message--info--right">
                                        <div class="message--date">{{ message.created | date("H:i") }}</div>
                                    </div>
                                </div>
                                <div class="d-flex flex-row-reverse mb-2">
                                    <div class="content bg-info p-1">
                                        <p class="text-white mb-0">{{ message.getUser.username }}
                                            : {{ message.getContent }}</p>
                                    </div>

                                </div>
                            </div>
                        {% else %}
                            <!-- Reciever Message-->
                            <div class="chat--message">
                                <div class="d-flex flex-row">
                                    <div class="message--info--left">
                                        <div class="message--date">{{ message.created | date("H:i") }}</div>
                                    </div>
                                </div>
                                <div class="d-flex flex-row mb-2">
                                    <div class="content bg-secondary p-1">
                                        <p class="text-white mb-0">{{ message.getUser.username }}
                                            : {{ message.getContent }}</p>
                                    </div>
                                </div>
                            </div>
                        {% endif %}
                    {% endfor %}
                {% endif %}
            </div>
            <div class="controls d-flex justify-content-between">
                {% if conversation is defined %}
                    <div class="control--input">
                        <label for="message-box" class="form-label">Your message</label>
                        <textarea id="message-box" name="message-box" aria-describedby="button-send" cols="40"
                                  class="form-control" placeholder="Message"></textarea>
                    </div>
                    <input id="button-send" type="submit" class="btn-send btn btn-primary" value="Envoyer"/>
                {% endif %}
            </div>
            <div id="bottom">
                &nbsp;
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script type="application/javascript">

        /**
         * autoscroll bottom
         */
        function autoBottomScroll() {
            const elementId = 'bottom';
            const scrollIntoViewOptions = {behavior: "smooth", block: "center"};
            document.getElementById(elementId).scrollIntoView(scrollIntoViewOptions);
        }

        /**
         * Gestion envoit de messages temps réel avec Mercure
         */
        // document.getElementById('bottom').scrollIntoView();
        document.addEventListener('DOMContentLoaded', function () {

            let messageBox = document.querySelector('#message-box');
            let pathUri = window.location.pathname;

            messageBox.addEventListener('keyup', (event) => {
                const input = event.target.value.trim();
                if (event.keyCode === 13 && input.length !== 0) {
                    sendMessage(input);
                    messageBox.value = "";
                }
            })

            document.getElementById("button-send").addEventListener("click", (event) => {
                sendMessage(messageBox.value);
                messageBox.value = "";
            })

            //console.log('URI = ' + pathUri);
            fetch(pathUri).then(result => {
                // Extract the hub URL from the Link header
                const hubUrl = new URL('{{ mercure_publish_url }}');
                //console.log("hubUrl = " + hubUrl);
                const url = new URL(hubUrl);

                // Append the topic(s) to subscribe as query parameter
                url.searchParams.append('topic', pathUri);
                //url.searchParams.append('topic', '/messages/{id}');

                // url.searchParams.append('topic', '/messages/3');
                console.log('fetch = ' + pathUri);

                // Subscribe to updates
                const eventSource = new EventSource(url, {
                    withCredentials: true //send cookies by browser
                });



                /*
                const newUrl = new URL(hubUrl);
                newUrl.searchParams.append('topic', '/ping/2');
                const eventSource2 = new EventSource(newUrl, {
                    withCredentials: false //send cookies by browser
                });
                 */

                /*
                if (typeof (eventSource2 !== undefined)) {

                    eventSource2.onmessage = (event) => {
                        console.log("PING!!!!");
                        console.log(event);
                    }
                }*/

                if (typeof (eventSource !== undefined)) {
                    eventSource.onmessage = (event) => {
                        console.log("Nachricht erhalten");
                        // console.dir(event);

                        if (event.data !== null) {
                            const data = JSON.parse(event.data);
                            if (data.from === '{{ app.user.getUsername }}') {
                                return;
                            }
                            console.log(data);
                            const newMessageHTML =
                                '<div class="chat--message">' +
                                '    <div class="d-flex flex-row">' +
                                '        <div class="message--date">' + data.date + '</div>' +
                                '    </div>' +
                                '    <div class="d-flex message--info--left">' +
                                '        <div class="content bg-secondary p-1"><p class="text-white mb-0">' + data.message + '</p></div>' +
                                '    </div>' +
                                '</div>';

                            document.querySelector('.conversation').insertAdjacentHTML('beforeend', '<div class="row">' + newMessageHTML + '</div>');
                            autoBottomScroll();
                        }
                    }
                }
            });

            autoBottomScroll();
        });

        // Grey messages
        function sendMessage(data) {
            if (data === "")
                return;

            let formData = new FormData();
            //set URI path to add a message ex: /messages/1/add
            const pathUri = window.location.pathname + '/add'
            //get textarea value to save
            formData.append('message-box', data);
            console.log('ADD MESSAGE URI : ' + pathUri);

            fetch(pathUri, {
                method: 'POST',
                body: formData
            }).then(result => {
                 // console.log(formData);
                 // console.log(result);
                // update chat-message
                let newMessageHTML =
                    '<div class="chat--message">' +
                    '<div class="d-flex flex-row-reverse">' +
                    '   <div class="content bg-info p-1 mb-3">' +
                    '       <p class="text-white mb-0">' + data + '</p>' +
                    '   </div>' +
                    '</div>' +
                    '</div>';
                document.querySelector('.conversation').insertAdjacentHTML('beforeend', '<div class="row">' + newMessageHTML + '</div>');
                autoBottomScroll();
            });
        }
    </script>
{% endblock %}